),
tbody(
tr(
td("Name:"),
td(input$name)
),
tr(
td("Older than 30?"),
td(`if`(input$age > 30, "yes", "no"))
),
tr(
td("Music styles"),
td(paste0(input$music, collapse=", "))
)
)
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(plotly)
table <- htmltools::tags$table
thead <- htmltools::tags$thead
tbody <- htmltools::tags$tbody
tr <- htmltools::tags$tr
td <- htmltools::tags$td
th <- htmltools::tags$th
ui <- bslib::page_sidebar(
theme =  bslib::bs_theme(version = 5, bootswatch = "darkly"),
sidebar = bslib::sidebar(
# Core Shiny input examples
textInput(inputId = "name", label = "Name", value = "John"),
numericInput(inputId = "age", label = "Age", min = 18, max = 100, step = 1, value = 18),
dateInput(  inputId = "date", label = "Date married"),
# shinyWidgets examples
numericRangeInput(inputId = "happyrange", label = "Happyness", min = 1, max= 100, value = c(1, 100)),
pickerInput(inputId = "catowner", multiple = T,label = "Cat owner?", choices = list(`Yes` = "yes", `No` = "no")),
checkboxGroupButtons(inputId = "music", label = "Music", choices = c("jazz", "metal", "classic"))
),
card(
card_header("Summarize input"),
card_body(
uiOutput("summary")
)
)
)
library(shiny)
library(bslib)
library(plotly)
library(shinyWidgets)
table <- htmltools::tags$table
thead <- htmltools::tags$thead
tbody <- htmltools::tags$tbody
tr <- htmltools::tags$tr
td <- htmltools::tags$td
th <- htmltools::tags$th
ui <- bslib::page_sidebar(
theme =  bslib::bs_theme(version = 5, bootswatch = "darkly"),
sidebar = bslib::sidebar(
# Core Shiny input examples
textInput(inputId = "name", label = "Name", value = "John"),
numericInput(inputId = "age", label = "Age", min = 18, max = 100, step = 1, value = 18),
dateInput(  inputId = "date", label = "Date married"),
# shinyWidgets examples
numericRangeInput(inputId = "happyrange", label = "Happyness", min = 1, max= 100, value = c(1, 100)),
pickerInput(inputId = "catowner", multiple = T,label = "Cat owner?", choices = list(`Yes` = "yes", `No` = "no")),
checkboxGroupButtons(inputId = "music", label = "Music", choices = c("jazz", "metal", "classic"))
),
card(
card_header("Summarize input"),
card_body(
uiOutput("summary")
)
)
)
server <- function(input, output, session) {
output$summary <- renderUI({
table(class="table",
thead(
tr(
th(style="width: 200px; ", "Input"),
th("Value")
)
),
tbody(
tr(
td("Name:"),
td(input$name)
),
tr(
td("Older than 30?"),
td(`if`(input$age > 30, "yes", "no"))
),
tr(
td("Music styles"),
td(paste0(input$music, collapse=", "))
)
)
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(plotly)
library(shinyWidgets)
table <- htmltools::tags$table
thead <- htmltools::tags$thead
tbody <- htmltools::tags$tbody
tr <- htmltools::tags$tr
td <- htmltools::tags$td
th <- htmltools::tags$th
ui <- bslib::page_sidebar(
theme =  bslib::bs_theme(version = 5, bootswatch = "darkly"),
sidebar = bslib::sidebar(
# Core Shiny input examples
textInput(inputId = "name", label = "Name", value = "John"),
numericInput(inputId = "age", label = "Age", min = 18, max = 100, step = 1, value = 18),
dateInput(  inputId = "date", label = "Date married"),
# shinyWidgets examples
numericRangeInput(inputId = "happyrange", label = "Happyness", min = 1, max= 100, value = c(1, 100)),
pickerInput(inputId = "catowner", multiple = T,label = "Cat owner?", choices = list(`Yes` = "yes", `No` = "no")),
checkboxGroupButtons(inputId = "music", label = "Music", choices = c("jazz", "metal", "classic"))
),
card(
card_header("Summarize input"),
card_body(
uiOutput("summary")
)
)
)
server <- function(input, output, session) {
output$summary <- renderUI({
table(class="table",
thead(
tr(
th(style="width: 200px; ", "Input"),
th("Value")
)
),
tbody(
tr(
td("Name:"),
td(input$name)
),
tr(
td("Older than 30?"),
td(`if`(input$age > 30, "yes", "no"))
),
tr(
td("Music styles"),
td(paste0(input$music, collapse=", "))
)
)
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(plotly)
table <- htmltools::tags$table
thead <- htmltools::tags$thead
tbody <- htmltools::tags$tbody
tr <- htmltools::tags$tr
td <- htmltools::tags$td
th <- htmltools::tags$th
ui <- bslib::page_sidebar(
theme =  bslib::bs_theme(version = 5, bootswatch = "darkly"),
sidebar = bslib::sidebar(
shinyWidgets::pickerInput(inputId = "variable",
label = "Variable",
choices = list(`Happyness` = "happy", `Money` = "money")
),
shinyWidgets::pickerInput(inputId = "catowner", multiple = T,
label = "Cat owner?",
choices = list(`Yes` = "yes", `No` = "no")
),
shinyWidgets::numericRangeInput(inputId = "happyrange",
label = "Happyness", min = 1, max= 100, value = c(1, 100)
)
),
card(
card_header("Plotly Chart"),
card_body(plotlyOutput("plot"))
)
)
server <- function(input, output, session) {
n <- 1000
# Generate some random data on the fly
data <- data.table::data.table(
HASCAT  = factor(sample(x = c("yes", "no"), size=  n, replace = T), levels = c("yes", "no"))
)[, `:=`(
money = runif(n, 20, 100) - 10 * (HASCAT == "yes"),
happy = rnorm(n, 40, 30)  + 10 * (HASCAT == "yes")
)]
output$plot <- renderPlotly({
# Quick summary table using data.table
summaries <- data[, list( M = mean(get(input$variable))), by = list(HASCAT)]
# Generate plot
plot_ly(summaries,
x      = ~HASCAT,
y      = ~M,
type   = "bar",
marker = list(color = 'lightblue')
) %>% layout(
xaxis = list(title = "Values"),
yaxis = list(title = "Frequency")
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(plotly)
table <- htmltools::tags$table
thead <- htmltools::tags$thead
tbody <- htmltools::tags$tbody
tr <- htmltools::tags$tr
td <- htmltools::tags$td
th <- htmltools::tags$th
choices <- list(`Happyness` = "happy", `Money` = "money")
ui <- bslib::page_sidebar(
theme =  bslib::bs_theme(version = 5, bootswatch = "darkly"),
sidebar = bslib::sidebar(
shinyWidgets::pickerInput(inputId = "variable",
label = "Variable",
choices = choices
),
shinyWidgets::pickerInput(inputId = "catowner", multiple = T,
label = "Cat owner?",
choices = list(`Yes` = "yes", `No` = "no")
),
shinyWidgets::numericRangeInput(inputId = "happyrange",
label = "Happyness", min = 1, max= 100, value = c(1, 100)
)
),
card(
card_header(
textOutput("title")
),
card_body(plotlyOutput("plot"))
)
)
server <- function(input, output, session) {
n <- 1000
output$title <- renderText({
input$variable
})
# Generate some random data on the fly
data <- data.table::data.table(
HASCAT  = factor(sample(x = c("yes", "no"), size=  n, replace = T), levels = c("yes", "no"))
)[, `:=`(
money = runif(n, 20, 100) - 10 * (HASCAT == "yes"),
happy = rnorm(n, 40, 30)  + 10 * (HASCAT == "yes")
)]
output$plot <- renderPlotly({
# Quick summary table using data.table
summaries <- data[, list( M = mean(get(input$variable))), by = list(HASCAT)]
# Generate plot
plot_ly(summaries,
x      = ~HASCAT,
y      = ~M,
type   = "bar",
marker = list(color = 'lightblue')
) %>% layout(
xaxis = list(title = "Values"),
yaxis = list(title = "Frequency")
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(plotly)
table <- htmltools::tags$table
thead <- htmltools::tags$thead
tbody <- htmltools::tags$tbody
tr <- htmltools::tags$tr
td <- htmltools::tags$td
th <- htmltools::tags$th
choices <- list(`Happyness` = "happy", `Money` = "money")
ui <- bslib::page_sidebar(
theme =  bslib::bs_theme(version = 5, bootswatch = "darkly"),
sidebar = bslib::sidebar(
shinyWidgets::pickerInput(inputId = "variable",
label = "Variable",
choices = choices
),
shinyWidgets::pickerInput(inputId = "catowner", multiple = T,
label = "Cat owner?",
choices = list(`Yes` = "yes", `No` = "no")
),
shinyWidgets::numericRangeInput(inputId = "happyrange",
label = "Happyness", min = 1, max= 100, value = c(1, 100)
)
),
card(
card_header(
textOutput("title")
),
card_body(plotlyOutput("plot"))
)
)
server <- function(input, output, session) {
n <- 1000
output$title <- renderText({
names(choices[which(choices == input$variable)])
#choices[[input$variable]]
})
# Generate some random data on the fly
data <- data.table::data.table(
HASCAT  = factor(sample(x = c("yes", "no"), size=  n, replace = T), levels = c("yes", "no"))
)[, `:=`(
money = runif(n, 20, 100) - 10 * (HASCAT == "yes"),
happy = rnorm(n, 40, 30)  + 10 * (HASCAT == "yes")
)]
output$plot <- renderPlotly({
# Quick summary table using data.table
summaries <- data[, list( M = mean(get(input$variable))), by = list(HASCAT)]
# Generate plot
plot_ly(summaries,
x      = ~HASCAT,
y      = ~M,
type   = "bar",
marker = list(color = 'lightblue')
) %>% layout(
xaxis = list(title = "Values"),
yaxis = list(title = "Frequency")
)
})
}
shinyApp(ui, server)
choices <- list(`Happyness` = "happy", `Money` = "money")
setNames(nm = names(choices))
setNames(nm = names(choices)) %>% setNames(choices)
library(shiny)
library(bslib)
library(plotly)
table <- htmltools::tags$table
thead <- htmltools::tags$thead
tbody <- htmltools::tags$tbody
tr <- htmltools::tags$tr
td <- htmltools::tags$td
th <- htmltools::tags$th
choices <- list(`Happyness` = "happy", `Money` = "money")
ui <- bslib::page_sidebar(
theme =  bslib::bs_theme(version = 5, bootswatch = "darkly"),
sidebar = bslib::sidebar(
shinyWidgets::pickerInput(inputId = "variable",
label = "Variable",
choices = choices
),
shinyWidgets::pickerInput(inputId = "catowner", multiple = T,
label = "Cat owner?",
choices = list(`Yes` = "yes", `No` = "no")
),
shinyWidgets::numericRangeInput(inputId = "happyrange",
label = "Happyness", min = 1, max= 100, value = c(1, 100)
)
),
card(
card_header(
textOutput("title")
),
card_body(plotlyOutput("plot"))
)
)
server <- function(input, output, session) {
n <- 1000
output$title <- renderText({
choices.named <- setNames(nm = names(choices)) %>% setNames(choices)
#names(choices[which(choices == input$variable)])
choices.named[[input$variable]]
})
# Generate some random data on the fly
data <- data.table::data.table(
HASCAT  = factor(sample(x = c("yes", "no"), size=  n, replace = T), levels = c("yes", "no"))
)[, `:=`(
money = runif(n, 20, 100) - 10 * (HASCAT == "yes"),
happy = rnorm(n, 40, 30)  + 10 * (HASCAT == "yes")
)]
output$plot <- renderPlotly({
# Quick summary table using data.table
summaries <- data[, list( M = mean(get(input$variable))), by = list(HASCAT)]
# Generate plot
plot_ly(summaries,
x      = ~HASCAT,
y      = ~M,
type   = "bar",
marker = list(color = 'lightblue')
) %>% layout(
xaxis = list(title = "Values"),
yaxis = list(title = "Frequency")
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(plotly)
library(shinyWidgets)
table <- htmltools::tags$table
thead <- htmltools::tags$thead
tbody <- htmltools::tags$tbody
tr <- htmltools::tags$tr
td <- htmltools::tags$td
th <- htmltools::tags$th
ui <- bslib::page_sidebar(
theme =  bslib::bs_theme(version = 5, bootswatch = "darkly"),
sidebar = bslib::sidebar(
# Core Shiny input examples
textInput(inputId = "name", label = "Name", value = "John"),
numericInput(inputId = "age", label = "Age", min = 18, max = 100, step = 1, value = 18),
dateInput(  inputId = "date", label = "Date married"),
# shinyWidgets examples
numericRangeInput(inputId = "happyrange", label = "Happyness", min = 1, max= 100, value = c(1, 100)),
pickerInput(inputId = "catowner", multiple = T,label = "Cat owner?", choices = list(`Yes` = "yes", `No` = "no")),
checkboxGroupButtons(inputId = "music", label = "Music", choices = c("jazz", "metal", "classic"))
),
card(
card_header("Summarize input"),
card_body(
uiOutput("summary")
)
)
)
server <- function(input, output, session) {
output$summary <- renderUI({
table(class="table",
thead(
tr(
th(style="width: 200px; ", "Input"),
th("Value")
)
),
tbody(
tr(
td("Name:"),
td(input$name)
),
tr(
td("Older than 30?"),
td(`if`(input$age > 30, "yes", "no"))
),
tr(
td("Music styles"),
td(paste0(input$music, collapse=", "))
)
)
)
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(plotly)
library(shinyWidgets)
table <- htmltools::tags$table
thead <- htmltools::tags$thead
tbody <- htmltools::tags$tbody
tr <- htmltools::tags$tr
td <- htmltools::tags$td
th <- htmltools::tags$th
ui <- bslib::page_sidebar(
theme =  bslib::bs_theme(version = 5, bootswatch = "darkly"),
sidebar = bslib::sidebar(
# Core Shiny input examples
textInput(inputId = "name", label = "Name", value = "John"),
numericInput(inputId = "age", label = "Age", min = 18, max = 100, step = 1, value = 18),
dateInput(  inputId = "date", label = "Date married"),
# shinyWidgets examples
numericRangeInput(inputId = "happyrange", label = "Happyness", min = 1, max= 100, value = c(1, 100)),
pickerInput(inputId = "catowner", multiple = T,label = "Cat owner?", choices = list(`Yes` = "yes", `No` = "no")),
checkboxGroupButtons(inputId = "music", label = "Music", choices = c("jazz", "metal", "classic"))
),
card(
card_header("Summarize input"),
card_body(
uiOutput("summary")
)
)
)
server <- function(input, output, session) {
bslib::bs_themer()
output$summary <- renderUI({
table(class="table",
thead(
tr(
th(style="width: 200px; ", "Input"),
th("Value")
)
),
tbody(
tr(
td("Name:"),
td(input$name)
),
tr(
td("Older than 30?"),
td(`if`(input$age > 30, "yes", "no"))
),
tr(
td("Music styles"),
td(paste0(input$music, collapse=", "))
)
)
)
})
}
shinyApp(ui, server)
